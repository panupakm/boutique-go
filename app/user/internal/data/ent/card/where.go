// Code generated by ent, DO NOT EDIT.

package card

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/panupakm/boutique-go/app/user/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldID, id))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldNumber, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldName, v))
}

// Ccv applies equality check predicate on the "ccv" field. It's identical to CcvEQ.
func Ccv(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCcv, v))
}

// ExpirationYear applies equality check predicate on the "expiration_year" field. It's identical to ExpirationYearEQ.
func ExpirationYear(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldExpirationYear, v))
}

// ExpirationMonth applies equality check predicate on the "expiration_month" field. It's identical to ExpirationMonthEQ.
func ExpirationMonth(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldExpirationMonth, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v string) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v string) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v string) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v string) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldNumber, v))
}

// NumberContains applies the Contains predicate on the "number" field.
func NumberContains(v string) predicate.Card {
	return predicate.Card(sql.FieldContains(FieldNumber, v))
}

// NumberHasPrefix applies the HasPrefix predicate on the "number" field.
func NumberHasPrefix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasPrefix(FieldNumber, v))
}

// NumberHasSuffix applies the HasSuffix predicate on the "number" field.
func NumberHasSuffix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasSuffix(FieldNumber, v))
}

// NumberEqualFold applies the EqualFold predicate on the "number" field.
func NumberEqualFold(v string) predicate.Card {
	return predicate.Card(sql.FieldEqualFold(FieldNumber, v))
}

// NumberContainsFold applies the ContainsFold predicate on the "number" field.
func NumberContainsFold(v string) predicate.Card {
	return predicate.Card(sql.FieldContainsFold(FieldNumber, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Card {
	return predicate.Card(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Card {
	return predicate.Card(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Card {
	return predicate.Card(sql.FieldContainsFold(FieldName, v))
}

// CcvEQ applies the EQ predicate on the "ccv" field.
func CcvEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCcv, v))
}

// CcvNEQ applies the NEQ predicate on the "ccv" field.
func CcvNEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldCcv, v))
}

// CcvIn applies the In predicate on the "ccv" field.
func CcvIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldCcv, vs...))
}

// CcvNotIn applies the NotIn predicate on the "ccv" field.
func CcvNotIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldCcv, vs...))
}

// CcvGT applies the GT predicate on the "ccv" field.
func CcvGT(v int) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldCcv, v))
}

// CcvGTE applies the GTE predicate on the "ccv" field.
func CcvGTE(v int) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldCcv, v))
}

// CcvLT applies the LT predicate on the "ccv" field.
func CcvLT(v int) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldCcv, v))
}

// CcvLTE applies the LTE predicate on the "ccv" field.
func CcvLTE(v int) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldCcv, v))
}

// ExpirationYearEQ applies the EQ predicate on the "expiration_year" field.
func ExpirationYearEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldExpirationYear, v))
}

// ExpirationYearNEQ applies the NEQ predicate on the "expiration_year" field.
func ExpirationYearNEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldExpirationYear, v))
}

// ExpirationYearIn applies the In predicate on the "expiration_year" field.
func ExpirationYearIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldExpirationYear, vs...))
}

// ExpirationYearNotIn applies the NotIn predicate on the "expiration_year" field.
func ExpirationYearNotIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldExpirationYear, vs...))
}

// ExpirationYearGT applies the GT predicate on the "expiration_year" field.
func ExpirationYearGT(v int) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldExpirationYear, v))
}

// ExpirationYearGTE applies the GTE predicate on the "expiration_year" field.
func ExpirationYearGTE(v int) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldExpirationYear, v))
}

// ExpirationYearLT applies the LT predicate on the "expiration_year" field.
func ExpirationYearLT(v int) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldExpirationYear, v))
}

// ExpirationYearLTE applies the LTE predicate on the "expiration_year" field.
func ExpirationYearLTE(v int) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldExpirationYear, v))
}

// ExpirationMonthEQ applies the EQ predicate on the "expiration_month" field.
func ExpirationMonthEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldExpirationMonth, v))
}

// ExpirationMonthNEQ applies the NEQ predicate on the "expiration_month" field.
func ExpirationMonthNEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldExpirationMonth, v))
}

// ExpirationMonthIn applies the In predicate on the "expiration_month" field.
func ExpirationMonthIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldExpirationMonth, vs...))
}

// ExpirationMonthNotIn applies the NotIn predicate on the "expiration_month" field.
func ExpirationMonthNotIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldExpirationMonth, vs...))
}

// ExpirationMonthGT applies the GT predicate on the "expiration_month" field.
func ExpirationMonthGT(v int) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldExpirationMonth, v))
}

// ExpirationMonthGTE applies the GTE predicate on the "expiration_month" field.
func ExpirationMonthGTE(v int) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldExpirationMonth, v))
}

// ExpirationMonthLT applies the LT predicate on the "expiration_month" field.
func ExpirationMonthLT(v int) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldExpirationMonth, v))
}

// ExpirationMonthLTE applies the LTE predicate on the "expiration_month" field.
func ExpirationMonthLTE(v int) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldExpirationMonth, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Card) predicate.Card {
	return predicate.Card(sql.NotPredicates(p))
}
