// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.3
// source: catalog/catalog.proto

package catalog

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCatalogGetProduct = "/boutiqueshop.Catalog/GetProduct"
const OperationCatalogListProducts = "/boutiqueshop.Catalog/ListProducts"
const OperationCatalogSearchProducts = "/boutiqueshop.Catalog/SearchProducts"

type CatalogHTTPServer interface {
	GetProduct(context.Context, *GetProductRequest) (*Product, error)
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	SearchProducts(context.Context, *SearchProductsRequest) (*SearchProductsResponse, error)
}

func RegisterCatalogHTTPServer(s *http.Server, srv CatalogHTTPServer) {
	r := s.Route("/")
	r.GET("/catalog", _Catalog_ListProducts0_HTTP_Handler(srv))
	r.GET("/product", _Catalog_GetProduct0_HTTP_Handler(srv))
	r.GET("/products", _Catalog_SearchProducts0_HTTP_Handler(srv))
}

func _Catalog_ListProducts0_HTTP_Handler(srv CatalogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProductsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCatalogListProducts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProducts(ctx, req.(*ListProductsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProductsResponse)
		return ctx.Result(200, reply)
	}
}

func _Catalog_GetProduct0_HTTP_Handler(srv CatalogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProductRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCatalogGetProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProduct(ctx, req.(*GetProductRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Product)
		return ctx.Result(200, reply)
	}
}

func _Catalog_SearchProducts0_HTTP_Handler(srv CatalogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchProductsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCatalogSearchProducts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchProducts(ctx, req.(*SearchProductsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchProductsResponse)
		return ctx.Result(200, reply)
	}
}

type CatalogHTTPClient interface {
	GetProduct(ctx context.Context, req *GetProductRequest, opts ...http.CallOption) (rsp *Product, err error)
	ListProducts(ctx context.Context, req *ListProductsRequest, opts ...http.CallOption) (rsp *ListProductsResponse, err error)
	SearchProducts(ctx context.Context, req *SearchProductsRequest, opts ...http.CallOption) (rsp *SearchProductsResponse, err error)
}

type CatalogHTTPClientImpl struct {
	cc *http.Client
}

func NewCatalogHTTPClient(client *http.Client) CatalogHTTPClient {
	return &CatalogHTTPClientImpl{client}
}

func (c *CatalogHTTPClientImpl) GetProduct(ctx context.Context, in *GetProductRequest, opts ...http.CallOption) (*Product, error) {
	var out Product
	pattern := "/product"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCatalogGetProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CatalogHTTPClientImpl) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...http.CallOption) (*ListProductsResponse, error) {
	var out ListProductsResponse
	pattern := "/catalog"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCatalogListProducts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CatalogHTTPClientImpl) SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...http.CallOption) (*SearchProductsResponse, error) {
	var out SearchProductsResponse
	pattern := "/products"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCatalogSearchProducts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
